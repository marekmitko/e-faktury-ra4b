var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import * as React from 'react';
import { isValidElement, useCallback, useEffect, useMemo, useRef, useState, } from 'react';
import debounce from 'lodash/debounce';
import get from 'lodash/get';
import isEqual from 'lodash/isEqual';
import clsx from 'clsx';
import { Autocomplete, Chip, TextField, } from '@mui/material';
import { styled } from '@mui/material/styles';
import { FieldTitle, useChoicesContext, useInput, useSuggestions, useTimeout, useTranslate, warning, } from 'ra-core';
import { useSupportCreateSuggestion, } from './useSupportCreateSuggestion';
import { InputHelperText } from './InputHelperText';
import { sanitizeInputRestProps } from './sanitizeInputRestProps';
/**
 * An Input component for an autocomplete field, using an array of objects for the options
 *
 * Pass possible options as an array of objects in the 'choices' attribute.
 *
 * By default, the options are built from:
 *  - the 'id' property as the option value,
 *  - the 'name' property as the option text
 * @example
 * const choices = [
 *    { id: 'M', name: 'Male' },
 *    { id: 'F', name: 'Female' },
 * ];
 * <AutocompleteInput source="gender" choices={choices} />
 *
 * You can also customize the properties to use for the option name and value,
 * thanks to the 'optionText' and 'optionValue' attributes.
 * @example
 * const choices = [
 *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },
 *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },
 * ];
 * <AutocompleteInput source="author_id" choices={choices} optionText="full_name" optionValue="_id" />
 *
 * `optionText` also accepts a function, so you can shape the option text at will:
 * @example
 * const choices = [
 *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },
 *    { id: 456, first_name: 'Jane', last_name: 'Austen' },
 * ];
 * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;
 * <AutocompleteInput source="author_id" choices={choices} optionText={optionRenderer} />
 *
 * `optionText` also accepts a React Element, that can access
 * the related choice through the `useRecordContext` hook. You can use Field components there.
 * Note that you must also specify the `matchSuggestion` and `inputText` props
 * @example
 * const choices = [
 *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },
 *    { id: 456, first_name: 'Jane', last_name: 'Austen' },
 * ];
 * const matchSuggestion = (filterValue, choice) => choice.first_name.match(filterValue) || choice.last_name.match(filterValue)
 * const inputText = (record) => `${record.fullName} (${record.language})`;
 *
 * const FullNameField = () => {
 *     const record = useRecordContext();
 *     return <span>{record.first_name} {record.last_name}</span>;
 * }
 * <AutocompleteInput source="author" choices={choices} optionText={<FullNameField />} matchSuggestion={matchSuggestion} inputText={inputText} />
 *
 * The choices are translated by default, so you can use translation identifiers as choices:
 * @example
 * const choices = [
 *    { id: 'M', name: 'myroot.gender.male' },
 *    { id: 'F', name: 'myroot.gender.female' },
 * ];
 *
 * However, in some cases (e.g. inside a `<ReferenceInput>`), you may not want
 * the choice to be translated. In that case, set the `translateChoice` prop to false.
 * @example
 * <AutocompleteInput source="gender" choices={choices} translateChoice={false}/>
 *
 * The object passed as `options` props is passed to the MUI <TextField> component
 *
 * @example
 * <AutocompleteInput source="author_id" options={{ color: 'secondary', InputLabelProps: { shrink: true } }} />
 */
export var AutocompleteInput = function (props) {
    var choicesProp = props.choices, className = props.className, _a = props.clearText, clearText = _a === void 0 ? 'ra.action.clear_input_value' : _a, _b = props.closeText, closeText = _b === void 0 ? 'ra.action.close' : _b, create = props.create, createLabel = props.createLabel, createItemLabel = props.createItemLabel, createValue = props.createValue, _c = props.debounce, debounceDelay = _c === void 0 ? 250 : _c, _d = props.defaultValue, defaultValue = _d === void 0 ? '' : _d, emptyText = props.emptyText, _e = props.emptyValue, emptyValue = _e === void 0 ? '' : _e, fieldOverride = props.field, format = props.format, helperText = props.helperText, idOverride = props.id, inputText = props.inputText, isFetchingProp = props.isFetching, isLoadingProp = props.isLoading, isRequiredOverride = props.isRequired, label = props.label, limitChoicesToValue = props.limitChoicesToValue, matchSuggestion = props.matchSuggestion, margin = props.margin, fieldStateOverride = props.fieldState, _f = props.filterToQuery, filterToQuery = _f === void 0 ? DefaultFilterToQuery : _f, formStateOverride = props.formState, _g = props.multiple, multiple = _g === void 0 ? false : _g, noOptionsText = props.noOptionsText, onBlur = props.onBlur, onChange = props.onChange, onCreate = props.onCreate, _h = props.openText, openText = _h === void 0 ? 'ra.action.open' : _h, _j = props.optionText, optionText = _j === void 0 ? 'name' : _j, _k = props.optionValue, optionValue = _k === void 0 ? 'id' : _k, parse = props.parse, resourceProp = props.resource, shouldRenderSuggestions = props.shouldRenderSuggestions, setFilter = props.setFilter, size = props.size, sourceProp = props.source, suggestionLimit = props.suggestionLimit, TextFieldProps = props.TextFieldProps, translateChoice = props.translateChoice, validate = props.validate, variant = props.variant, rest = __rest(props, ["choices", "className", "clearText", "closeText", "create", "createLabel", "createItemLabel", "createValue", "debounce", "defaultValue", "emptyText", "emptyValue", "field", "format", "helperText", "id", "inputText", "isFetching", "isLoading", "isRequired", "label", "limitChoicesToValue", "matchSuggestion", "margin", "fieldState", "filterToQuery", "formState", "multiple", "noOptionsText", "onBlur", "onChange", "onCreate", "openText", "optionText", "optionValue", "parse", "resource", "shouldRenderSuggestions", "setFilter", "size", "source", "suggestionLimit", "TextFieldProps", "translateChoice", "validate", "variant"]);
    var _l = useChoicesContext({
        choices: choicesProp,
        isFetching: isFetchingProp,
        isLoading: isLoadingProp,
        resource: resourceProp,
        source: sourceProp,
    }), allChoices = _l.allChoices, isLoading = _l.isLoading, resource = _l.resource, source = _l.source, setFilters = _l.setFilters;
    var translate = useTranslate();
    var _m = useInput(__assign({ defaultValue: defaultValue, format: format, id: idOverride, field: fieldOverride, fieldState: fieldStateOverride, formState: formStateOverride, onBlur: onBlur, onChange: onChange, parse: parse, resource: resource, source: source, validate: validate }, rest)), id = _m.id, field = _m.field, isRequired = _m.isRequired, _o = _m.fieldState, error = _o.error, invalid = _o.invalid, isTouched = _o.isTouched, isSubmitted = _m.formState.isSubmitted;
    var selectedChoice = useSelectedChoice(field.value, {
        choices: allChoices,
        // @ts-ignore
        multiple: multiple,
        optionValue: optionValue,
    });
    useEffect(function () {
        // eslint-disable-next-line eqeqeq
        if (isValidElement(optionText) && inputText == undefined) {
            throw new Error("\nIf you provided a React element for the optionText prop, you must also provide the inputText prop (used for the text input)");
        }
        // eslint-disable-next-line eqeqeq
        if (isValidElement(optionText) && matchSuggestion == undefined) {
            throw new Error("\nIf you provided a React element for the optionText prop, you must also provide the matchSuggestion prop (used to match the user input with a choice)");
        }
    }, [optionText, inputText, matchSuggestion]);
    useEffect(function () {
        warning(
        /* eslint-disable eqeqeq */
        shouldRenderSuggestions != undefined && noOptionsText == undefined, "When providing a shouldRenderSuggestions function, we recommend you also provide the noOptionsText prop and set it to a text explaining users why no options are displayed. It supports translation keys.");
        /* eslint-enable eqeqeq */
    }, [shouldRenderSuggestions, noOptionsText]);
    var _p = useSuggestions({
        choices: allChoices,
        emptyText: emptyText,
        emptyValue: emptyValue,
        limitChoicesToValue: limitChoicesToValue,
        matchSuggestion: matchSuggestion,
        optionText: optionText,
        optionValue: optionValue,
        selectedItem: selectedChoice,
        suggestionLimit: suggestionLimit,
        translateChoice: translateChoice,
    }), getChoiceText = _p.getChoiceText, getChoiceValue = _p.getChoiceValue, getSuggestions = _p.getSuggestions;
    var _q = useState(''), filterValue = _q[0], setFilterValue = _q[1];
    var handleChange = function (newValue) {
        var _a;
        if (multiple) {
            if (Array.isArray(newValue)) {
                field.onChange(newValue.map(getChoiceValue));
            }
            else {
                field.onChange(__spreadArray(__spreadArray([], ((_a = field.value) !== null && _a !== void 0 ? _a : []), true), [
                    getChoiceValue(newValue),
                ], false));
            }
        }
        else {
            field.onChange(getChoiceValue(newValue) || '');
        }
    };
    // eslint-disable-next-line
    var debouncedSetFilter = useCallback(debounce(function (filter) {
        if (setFilter) {
            return setFilter(filter);
        }
        if (choicesProp) {
            return;
        }
        setFilters(filterToQuery(filter), undefined, true);
    }, debounceDelay), [debounceDelay, setFilters, setFilter]);
    // We must reset the filter every time the value changes to ensure we
    // display at least some choices even if the input has a value.
    // Otherwise, it would only display the currently selected one and the user
    // would have to first clear the input before seeing any other choices
    var currentValue = useRef(field.value);
    useEffect(function () {
        if (!isEqual(currentValue.current, field.value)) {
            currentValue.current = field.value;
            debouncedSetFilter('');
        }
    }, [field.value]); // eslint-disable-line
    var _r = useSupportCreateSuggestion({
        create: create,
        createLabel: createLabel,
        createItemLabel: createItemLabel,
        createValue: createValue,
        handleChange: handleChange,
        filter: filterValue,
        onCreate: onCreate,
        optionText: optionText,
    }), getCreateItem = _r.getCreateItem, handleChangeWithCreateSupport = _r.handleChange, createElement = _r.createElement, createId = _r.createId;
    var getOptionLabel = useCallback(function (option, isListItem) {
        if (isListItem === void 0) { isListItem = false; }
        // eslint-disable-next-line eqeqeq
        if (option == undefined) {
            return '';
        }
        // Value selected with enter, right from the input
        if (typeof option === 'string') {
            return option;
        }
        if ((option === null || option === void 0 ? void 0 : option.id) === createId) {
            return option === null || option === void 0 ? void 0 : option.name;
        }
        if (!isListItem && inputText !== undefined) {
            return inputText(option);
        }
        return getChoiceText(option);
    }, [getChoiceText, inputText, createId]);
    useEffect(function () {
        if (!multiple) {
            var optionLabel = getOptionLabel(selectedChoice);
            if (typeof optionLabel === 'string') {
                setFilterValue(optionLabel);
            }
            else {
                throw new Error('When optionText returns a React element, you must also provide the inputText prop');
            }
        }
    }, [getOptionLabel, multiple, selectedChoice]);
    var handleInputChange = function (event, newInputValue, reason) {
        if (!doesQueryMatchSelection(newInputValue, event === null || event === void 0 ? void 0 : event.type)) {
            setFilterValue(newInputValue);
            debouncedSetFilter(newInputValue);
        }
    };
    var doesQueryMatchSelection = useCallback(function (filter, eventType) {
        var selectedItemTexts = [];
        if (multiple) {
            selectedItemTexts = selectedChoice.map(function (item) {
                return getOptionLabel(item);
            });
        }
        else {
            selectedItemTexts = [getOptionLabel(selectedChoice)];
        }
        return eventType && eventType === 'change'
            ? selectedItemTexts.includes(filter) && selectedChoice
            : selectedItemTexts.includes(filter);
    }, [getOptionLabel, multiple, selectedChoice]);
    var doesQueryMatchSuggestion = useCallback(function (filter) {
        var hasOption = !!allChoices
            ? allChoices.some(function (choice) { return getOptionLabel(choice) === filter; })
            : false;
        return doesQueryMatchSelection(filter) || hasOption;
    }, [allChoices, getOptionLabel, doesQueryMatchSelection]);
    var filterOptions = function (options, params) {
        var inputValue = params.inputValue;
        if ((onCreate || create) &&
            inputValue !== '' &&
            !doesQueryMatchSuggestion(filterValue)) {
            return options.concat(getCreateItem(inputValue));
        }
        return options;
    };
    var handleAutocompleteChange = function (event, newValue, reason) {
        handleChangeWithCreateSupport(newValue != null ? newValue : '');
    };
    var oneSecondHasPassed = useTimeout(1000, filterValue);
    // To avoid displaying an empty list of choices while a search is in progress,
    // we store the last choices in a ref. We'll display those last choices until
    // a second has passed.
    var currentChoices = useRef(allChoices);
    useEffect(function () {
        if (allChoices && (allChoices.length > 0 || oneSecondHasPassed)) {
            currentChoices.current = allChoices;
        }
    }, [allChoices, oneSecondHasPassed]);
    var suggestions = useMemo(function () {
        var _a;
        if (setFilters && (allChoices === null || allChoices === void 0 ? void 0 : allChoices.length) === 0 && !oneSecondHasPassed) {
            return (_a = currentChoices.current) !== null && _a !== void 0 ? _a : [];
        }
        return getSuggestions(filterValue);
    }, [
        allChoices,
        filterValue,
        getSuggestions,
        oneSecondHasPassed,
        setFilters,
    ]);
    var isOptionEqualToValue = function (option, value) {
        // eslint-disable-next-line eqeqeq
        return getChoiceValue(option) == getChoiceValue(value);
    };
    return (React.createElement(React.Fragment, null,
        React.createElement(StyledAutocomplete, __assign({ blurOnSelect: true, className: clsx('ra-input', "ra-input-".concat(source), className), clearText: translate(clearText, { _: clearText }), closeText: translate(closeText, { _: closeText }), openOnFocus: true, openText: translate(openText, { _: openText }), id: id, isOptionEqualToValue: isOptionEqualToValue, filterSelectedOptions: true, renderInput: function (params) { return (React.createElement(TextField, __assign({ name: field.name, label: React.createElement(FieldTitle, { label: label, source: source, resource: resourceProp, isRequired: typeof isRequiredOverride !== 'undefined'
                        ? isRequiredOverride
                        : isRequired }), error: (isTouched || isSubmitted) && invalid, helperText: React.createElement(InputHelperText, { touched: isTouched || isSubmitted, error: error === null || error === void 0 ? void 0 : error.message, helperText: helperText }), margin: margin, variant: variant, className: AutocompleteInputClasses.textField }, TextFieldProps, params, { size: size }))); }, multiple: multiple, renderTags: function (value, getTagProps) {
                return value.map(function (option, index) { return (React.createElement(Chip, __assign({ label: isValidElement(optionText)
                        ? inputText(option)
                        : getChoiceText(option), sx: {
                        '.MuiSvgIcon-root': {
                            // FIXME: Workaround to allow choices deletion
                            // Maybe related to storybook and mui using different versions of emotion
                            zIndex: 100,
                        },
                    }, size: "small" }, getTagProps({ index: index })))); });
            }, noOptionsText: typeof noOptionsText === 'string'
                ? translate(noOptionsText, { _: noOptionsText })
                : noOptionsText, selectOnFocus: true, clearOnBlur: true }, sanitizeInputRestProps(rest), { freeSolo: !!create || !!onCreate, handleHomeEndKeys: !!create || !!onCreate, filterOptions: filterOptions, options: shouldRenderSuggestions == undefined || // eslint-disable-line eqeqeq
                shouldRenderSuggestions(filterValue)
                ? suggestions
                : [], getOptionLabel: getOptionLabel, inputValue: filterValue, loading: isLoading && suggestions.length === 0 && oneSecondHasPassed, value: selectedChoice, onChange: handleAutocompleteChange, onBlur: field.onBlur, onInputChange: handleInputChange, renderOption: function (props, record) {
                props.key = record[optionValue];
                return React.createElement("li", __assign({}, props), getOptionLabel(record, true));
            } })),
        createElement));
};
var PREFIX = 'RaAutocompleteInput';
export var AutocompleteInputClasses = {
    textField: "".concat(PREFIX, "-textField"),
};
var StyledAutocomplete = styled(Autocomplete, {
    name: PREFIX,
    overridesResolver: function (props, styles) { return styles.root; },
})(function (_a) {
    var _b;
    var theme = _a.theme;
    return (_b = {},
        _b["& .".concat(AutocompleteInputClasses.textField)] = {
            minWidth: theme.spacing(20),
        },
        _b);
});
/**
 * Returns the selected choice (or choices if multiple) by matching the input value with the choices.
 */
var useSelectedChoice = function (value, _a) {
    var choices = _a.choices, multiple = _a.multiple, optionValue = _a.optionValue;
    var selectedChoiceRef = useRef(getSelectedItems(choices, value, optionValue, multiple));
    var _b = useState(function () { return getSelectedItems(choices, value, optionValue, multiple); }), selectedChoice = _b[0], setSelectedChoice = _b[1];
    // As the selected choices are objects, we want to ensure we pass the same
    // reference to the Autocomplete as it would reset its filter value otherwise.
    useEffect(function () {
        var newSelectedItems = getSelectedItems(choices, value, optionValue, multiple);
        if (!isEqual(selectedChoiceRef.current, newSelectedItems)) {
            selectedChoiceRef.current = newSelectedItems;
            setSelectedChoice(newSelectedItems);
        }
    }, [choices, value, multiple, optionValue]);
    return selectedChoice || null;
};
var getSelectedItems = function (choices, value, optionValue, multiple) {
    if (choices === void 0) { choices = []; }
    if (optionValue === void 0) { optionValue = 'id'; }
    if (multiple) {
        return (value || [])
            .map(function (item) {
            return choices.find(function (choice) { return item === get(choice, optionValue); });
        })
            .filter(function (item) { return !!item; });
    }
    return choices.find(function (choice) { return get(choice, optionValue) === value; }) || '';
};
var DefaultFilterToQuery = function (searchText) { return ({ q: searchText }); };
